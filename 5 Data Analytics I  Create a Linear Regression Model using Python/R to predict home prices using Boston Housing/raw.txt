Data Analytics I 
	Create a Linear Regression Model using Python/R to predict home prices using Boston Housing Dataset (https://www.kaggle.com/c/boston-housing). The Boston Housing dataset contains information about various houses in Boston through different parameters. There are 506 samples and 14 feature variables in this dataset. The objective is to predict the value of prices of the house using the given features.

import numpy as np
# import pandas as pd
# import matplotlib.pyplot as plt
# import seaborn as sb

# df=pd.read_csv("/content/HousingData.csv")
# df

# df.isnull().sum()
# ndf=df.dropna(axis=0,how="any")
# ndf.isnull().sum()

# #ndf.plot.scatter('RM','MEDV')

# ndf

# X=ndf[['CRIM','ZN','INDUS','CHAS','NOX','RM','AGE','DIS','RAD','TAX','PTRATIO','B','LSTAT']]
# y=ndf['MEDV']

# from sklearn.linear_model import LinearRegression
# from sklearn.model_selection import train_test_split
# X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.3)

# lm=LinearRegression()
# lm.fit(X_train,y_train)
# pred=lm.predict(X_test)

# plt.scatter(y_test,pred)
# plt.xlabel('y-TEST')
# plt.ylabel('predict')

# from sklearn import metrics
# print('MAE : ',metrics.mean_absolute_error(y_test,pred))
# print('MSE :',metrics.mean_squared_error(y_test,pred))
# print('RMSE :',np.sqrt(metrics.mean_squared_error(y_test,pred)))
# df1=pd.DataFrame({'Actual ':y_test,'predict':pred,'variance':y_test-pred})
# df1

# from sklearn.metrics import r2_score
# score=round(r2_score(y_test,pred)*100,2)
# print('r2Â score',score)